#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_AMD_gpu_shader_half_float : enable

layout(local_size_x=32, local_size_y=4, local_size_z=1) in;


layout(buffer_reference) restrict writeonly buffer OutputDataRef {
	float outputFloat;
};


#define FMA10 \
	x1 = x1 * y1 + z; \
	x2 = x2 * y2 + z; \
	x1 = x1 * y1 + z; \
	x2 = x2 * y2 + z; \
	x1 = x1 * y1 + z; \
	x2 = x2 * y2 + z; \
	x1 = x1 * y1 + z; \
	x2 = x2 * y2 + z; \
	x1 = x1 * y1 + z; \
	x2 = x2 * y2 + z

#define FMA100 \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10; \
	FMA10

#define FMA1000 \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100; \
	FMA100

#define FMA10000 \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000; \
	FMA1000


void main()
{
	// initial values of x, y and z
	float16_t x1 = float16_t(gl_GlobalInvocationID.x);
	float16_t y1 = float16_t(gl_GlobalInvocationID.y);
	float16_t z  = float16_t(gl_GlobalInvocationID.z);
	float16_t x2 = x1 + float16_t(0.5);
	float16_t y2 = y1 + float16_t(0.5);

	FMA10000;

	// condition that will never be true in reality
	// (this avoids optimizer to consider the results of previous computations as unused
	// and to optimize the final shader code by their removal)
	if(x1 == 0.1 || x2 == 0.1) {
		// write to artificially generated address
		// (the write will never happen in reality)
		OutputDataRef data = OutputDataRef(uint64_t(0));
		data.outputFloat = y1;
	}
}
