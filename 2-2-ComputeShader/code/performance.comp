#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require

layout(local_size_x=32, local_size_y=4, local_size_z=1) in;


layout(buffer_reference) restrict writeonly buffer OutputDataRef {
	float outputFloat;
};


#define FMA10 \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z; \
	x = x*y+z;

#define FMA100 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10 \
	FMA10

#define FMA1000 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100 \
	FMA100

#define FMA10000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000 \
	FMA1000


void main()
{
	float x = gl_GlobalInvocationID.x;
	float y = gl_GlobalInvocationID.y;
	float z = gl_GlobalInvocationID.z;

	FMA10000

	// condition that will never be true in reality
	// (this avoids optimizer to consider the results of previous computations as unused
	// and to optimize the final shader code by their removal)
	if(x == 0.1) {
		// write to artificially generated address
		// (the write will never happen in reality)
		OutputDataRef data = OutputDataRef(uint64_t(0));
		data.outputFloat = y;
	}
}
